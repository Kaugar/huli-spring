buildscript {
	ext {
		springBootVersion = '2.0.1.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
		classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'
apply plugin: 'idea'
apply plugin: 'eclipse'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}




dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile ('org.postgresql:postgresql:42.2.2.jre7')
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')

}
tasks.withType(Test) {
	scanForTestClasses = false
	include "**/*Test.class" // whatever Ant pattern matches your test class files
}

task buildDockerMySql(type: Docker) {
	push = false
	applicationName = "${jar.baseName}-mysql"
	dockerfile = file('src/main/docker/mysql/Dockerfile')

}

task buildDocker(type: Docker, dependsOn: buildDockerMySql) {
	push = false
	applicationName = "${jar.baseName}-web"
	dockerfile = file('src/main/docker/web/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}

task writeClasspath {
	//buildDir.mkdirs()
	new File(".", ".classpath").text = configurations.runtime.asPath + "\n"
}

tasks.build.dependsOn(writeClasspath)


task wrapper(type: Wrapper) {
	gradleVersion = '2.7'
}

